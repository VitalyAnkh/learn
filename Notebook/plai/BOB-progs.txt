Here are some programs written in the BOB language.
WARNING: I think they're correct, but if not, please let me know.

You would run any of these using
		(interp (parse '<expression goes here>) (mtSub))

[You could even define a Scheme function 
		(define (run expr) (interp (parse expr) (mtSub)))
 and then you could just type
		(run '{+ 3 4})  ]



{with {x 2}
  {with {y 12}
    {+ {* x x} {* y y}}
}}



{- 1 {- 2 {- 3 {- 4 {- 5 6}}}}}



{with {x 3} ;; this should evaluate to a boolean value
  {= x 2}}
  
  
  
{with {x 3}
  {= x 3}}
  
  
  
{if {= {* 5 21} {* 7 15}}
    9999
    5555
}



{with {x 9}    ; you can change these vals, but the larger one should
  {with {y 3}  ; always wind up at the left of the final number
               ; and the smaller one at the right
     {with  {min  {if {< x y}
                     x 
                     y}}
        {with  {max  {if {< x y}
                        y 
                        x}}
           {+ {* max 1000} min} ; output will be best if smaller is
 }}}}                           ; no more than two digits



{with {double {fun {n} {* 2 n}}}
  {double 12}}



{with {abs {fun {x} {if {< x 0} {- x} x}}} ;; absolute value
   {abs -101}
}



{with {double {fun {n} {* 2 n}}}
   {with {abs {fun {x} {if {< x 0} {- x} x}}}
      {double {abs -101}}
   }
}

{rec {fac {fun {n}
              {if {< n 2} 1
                  {* n {fac {- n 1}}}}}}
           
                       {fac 6}}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start by defining general helper functions
;; sort of like car and cdr (but backwards).
;;
;; written by mike slattery - nov 2019

;; {front n} returns n with the last digit removed
{with {front {fun {n}
               {/ n 10}}}
	
;; {last n} returns the last digit of n	
{with {last {fun {n}
               {- n {* 10 {front n}}}}}
	
;; Those helper functions make the code for
;; recursive functions playing with the digits
;; of a number much easier to read.

;; {sum-digits n} returns the sum of the digits of
;; the non-negative integer n	
{rec {sum-digits {fun {n}
                   {if {< n 10} n
                         {+ {last n} {sum-digits {front n}}}
                   }}}

    {sum-digits 6430761}
	
}}}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Use currying to define "two-parameter"
;; function in terms of one-parameter
;; (first-class) functions
;;
;;  {{mod-base b} n}
;;
;; returns n modulo b.
;; [This should work in the language JOE]
;;
;; written by mike slattery - oct 2013
;;;;;;;;;;;;;;;;;;;;;;;;;

{with {mod-base {fun {b}
                  {fun {n}
                    {- n {* b {/ n b}}}
                  }
                }
      }
  {{mod-base 7} 11} ;; Compute 11 mod 7
}


;; Or put the parameters in the more
;; traditional order: 

{with {mod {fun {n}
                  {fun {b}
                    {- n {* b {/ n b}}}
                  }
                }
      }
  {{mod 100} 7} ;; Compute 100 mod 7
}

;; Currying with recursion:
;; {{power n} p} computes n to the p power

{rec {power {fun {n}
               {fun {p}
                  {if {= p 0} 1
                         {* n {{power n} {- p 1}}}
                  }
               }
            }
     }
  {{power 3} 7}
}

 
