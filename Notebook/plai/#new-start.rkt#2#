#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 68 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 33 #"FantasqueSansMono Nerd Font Mono\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 158 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 150 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 33 #"FantasqueSansMono Nerd Font Mono\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 158 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 211 72 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 150 255 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 4122 0 17 3 25 #";; COSC 3410 - Homework 8"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Due Date: 12/4/19"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Jianfei Lin & Tuoxuan Ren"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 28 3 10 #"#lang plai"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"TBOB"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"div"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"um"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 14 #")]            "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"equality"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"lt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 10 #"named-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"iff"
0 0 24 3 2 #" ("
0 0 14 3 8 #"test-val"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"true-val"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 9 #"false-val"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 15 3 3 #"rec"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"named-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"TBOB?"
0 0 24 3 4 #")]) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; (define-type TBOB-value"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";   [numV (n number?)]"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";   [closureV (param symbol?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";             (body TBOB?)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";             (env Env?)]"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";   [boolV (b boolean?)] "
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"TypeEnv"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"mtTypeSub"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"aTypeSub"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"TypeEnv?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; TYPE CHECKER EXAMPLE RECOMMENDED FOR REFERENCE NOV15-DEFS.RKT"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"numType"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"boolType"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"funType"
0 0 24 3 2 #" ("
0 0 14 3 6 #"domain"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"codomain"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; type-parse : sexp -> Type"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"type-parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"number"
0 0 24 3 3 #") ("
0 0 14 3 7 #"numType"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"number"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"numType"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"boolType"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"boolean"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolType"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"funType"
0 0 24 3 2 #" ("
0 0 14 3 10 #"type-parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"type-parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; parse : sexp -> TBOB abstract syntax trees"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; added --> error checking for members of sexp and CHANGES FOR TYPE"
 #" SPECIFICATIONS"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 8 #"addition"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 14 #"multiplication"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"sub"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    [("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"um"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 11 #"subtraction"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 2 #"um"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"div"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 8 #"division"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    [("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 8 #"equality"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 8 #"equality"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 2 #"lt"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 4 #"less"
0 0 19 3 1 #" "
0 0 19 3 4 #"than"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 10 #"type-parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 5 #" of '"
0 0 19 3 27 #"with' expression incorrect\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 15 3 3 #"rec"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 3 #"rec"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 10 #"type-parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 8 #"contents"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 3 #"rec"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 3 #"fun"
0 0 24 3 3 #" ( "
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"type-parse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #"( "
0 0 14 3 4 #"rest"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 3 #"   "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 8 #"contents"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 3 #"fun"
0 0 19 3 1 #"'"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 3 #"iff"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 2 #"if"
0 0 19 3 1 #" "
0 0 19 3 9 #"statement"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 3 #"app"
0 0 19 3 1 #"'"
0 0 19 3 10 #" incorrect"
0 0 19 3 1 #"\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 7 #" rember"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  ("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"lat)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (cond"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";    [("
0 0 17 3 6 #"empty?"
0 0 17 3 1 #" "
0 0 17 3 3 #"lat"
0 0 17 3 3 #" ) "
0 0 17 3 4 #"'()]"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";    [("
0 0 17 3 3 #"eq?"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 3 #"lat"
0 0 17 3 2 #") "
0 0 17 3 1 #"a"
0 0 17 3 3 #") ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 5 #"lat)]"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";    ["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 4 #"lat)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";                ("
0 0 17 3 6 #"rember"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 2 #" ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 9 #"lat)))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; lookup: symbol TypeEnv --> Type"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 7 #"TypeEnv"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"mtTypeSub"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"no"
0 0 19 3 1 #" "
0 0 19 3 7 #"binding"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 2 #"id"
0 0 19 3 3 #" ~a"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"aTypeSub"
0 0 24 3 2 #" ("
0 0 14 3 10 #"bound-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"rest-tenv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 10 #"bound-type"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 9 #"rest-tenv"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; get-type: TBOB TypeEnv--> Type"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"TBOB"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"numType"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 7 #"numType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 8 #"operands"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 2 #" +"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"sub"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 7 #"numType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 8 #"operands"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 2 #" -"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 7 #"numType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 8 #"operands"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 2 #" *"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"div"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 7 #"numType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 8 #"operands"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 2 #" /"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"um"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 7 #"numType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 8 #"operands"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 2 #" -"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"equality"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"boolType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 8 #"operands"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 2 #" ="
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"lt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"numType?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"boolType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 8 #"operands"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 2 #" <"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 7 #"; (cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 4 #";  ["
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 44 #"; determine this according to what? id-type?"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"numType?"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 3 #") ("
0 0 14 3 9 #"boolType?"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aTypeSub"
0 0 24 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 4 #")) ]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 8 #"funType?"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 3 #") ("
0 0 14 3 8 #"get-type"
0 0 24 3 2 #"  "
0 0 14 3 10 #"bound-body"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"aTypeSub"
0 0 24 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"This shouldn't happen!\""
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 3 #"; ("
0 0 17 3 8 #"get-type"
0 0 17 3 2 #" ("
0 0 17 3 3 #"app"
0 0 17 3 2 #" ("
0 0 17 3 3 #"fun"
0 0 17 3 1 #" "
0 0 17 3 10 #"bound-body"
0 0 17 3 2 #" ("
0 0 17 3 8 #"aTypeSub"
0 0 17 3 1 #" "
0 0 17 3 8 #"bound-id"
0 0 17 3 1 #" "
0 0 17 3 7 #"id-type"
0 0 17 3 9 #" tenv))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Type"
0 0 19 3 1 #" "
0 0 19 3 8 #"mismatch"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 12 #" declaration"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"iff"
0 0 24 3 2 #" ("
0 0 14 3 8 #"test-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"true-val"
0 0 24 3 1 #" "
0 0 14 3 9 #"false-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"true-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #") ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"false-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"true-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Type"
0 0 19 3 1 #" "
0 0 19 3 8 #"mismatch"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"iff"
0 0 19 3 12 #" declaration"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"funType"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aTypeSub"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 19 #";(error 'get-type \""
0 0 17 3 4 #"Type"
0 0 17 3 1 #" "
0 0 17 3 8 #"mismatch"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 3 #"fun"
0 0 17 3 16 #" declaration\"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 15 3 3 #"rec"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bound-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"id-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 21 #";; use these to debug"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 4 #";; ("
0 0 17 3 5 #"begin"
0 0 17 3 2 #" ("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 8 #"aTypeSub"
0 0 17 3 1 #" "
0 0 17 3 8 #"bound-id"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 1 #" "
0 0 17 3 4 #"tenv"
0 0 17 3 2 #") "
0 0 17 3 4 #"tenv"
0 0 17 3 4 #")) ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 10 #"bound-body"
0 0 17 3 1 #" "
0 0 17 3 5 #"x)) ]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 7 #";(begin"
0 0 17 3 9 #" (display"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 8 #"bound-id"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 3 #" \\n"
0 0 17 3 1 #"\""
0 0 17 3 2 #")("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 8 #"bound-id"
0 0 17 3 3 #") ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"\\t"
0 0 17 3 1 #"\""
0 0 17 3 2 #")("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 7 #"id-type"
0 0 17 3 2 #")("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"\\t"
0 0 17 3 2 #"\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 9 #";       ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 2 #")("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"\\t"
0 0 17 3 1 #"\""
0 0 17 3 2 #")("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 10 #"bound-body"
0 0 17 3 2 #")("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"\\n"
0 0 17 3 2 #"\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 4 #";(if"
0 0 17 3 2 #" ("
0 0 17 3 6 #"equal?"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 10 #"bound-body"
0 0 17 3 2 #" ("
0 0 17 3 8 #"aTypeSub"
0 0 17 3 1 #" "
0 0 17 3 8 #"bound-id"
0 0 17 3 1 #" "
0 0 17 3 7 #"id-type"
0 0 17 3 1 #" "
0 0 17 3 4 #"tenv"
0 0 17 3 3 #")) "
0 0 17 3 8 #"id-type)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 15 #";             ("
0 0 17 3 16 #"funType-codomain"
0 0 17 3 1 #" "
0 0 17 3 8 #"id-type)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 68
(
 #";             (error 'get-type \"Type mismath in fun declaration\"))"
 #")]"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" ( "
0 0 17 3 2 #";["
0 0 17 3 12 #"extended-env"
0 0 17 3 2 #" ("
0 0 17 3 8 #"aTypeSub"
0 0 17 3 2 #" ("
0 0 17 3 12 #"fun-arg-name"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 3 #") ("
0 0 17 3 8 #"get-type"
0 0 17 3 2 #" ("
0 0 17 3 7 #"app-arg"
0 0 17 3 1 #" "
0 0 17 3 10 #"bound-body"
0 0 17 3 2 #") "
0 0 17 3 5 #"tenv)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 23 #";                     ("
0 0 17 3 8 #"aTypeSub"
0 0 17 3 3 #" ( "
0 0 17 3 8 #"bound-id"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 1 #" "
0 0 17 3 4 #"tenv"
0 0 17 3 2 #") "
0 0 17 3 7 #"tenv) )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 23 #";                    )]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 7 #"rec-arg"
0 0 24 3 2 #" ("
0 0 14 3 7 #"app-arg"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 4 #"; [("
0 0 17 3 3 #"not"
0 0 17 3 2 #" ("
0 0 17 3 7 #"equal? "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 11 #";       ))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 37 #";; how to reduce to fundamental case?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 19 #";; use cond to test"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 3 #" ( "
0 0 14 3 11 #"fun-id-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 24 3 4 #") ( "
0 0 14 3 8 #"fun-body"
0 0 24 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"fun-id-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 4 #"; [("
0 0 17 3 3 #"id?"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 3 #") ("
0 0 17 3 2 #"if"
0 0 17 3 2 #" ("
0 0 17 3 6 #"equal?"
0 0 17 3 2 #" ("
0 0 17 3 14 #"funType-domain"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lookup"
0 0 17 3 2 #" ("
0 0 17 3 7 #"id-name"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 2 #") "
0 0 17 3 12 #"extended-env"
0 0 17 3 4 #")) ("
0 0 17 3 8 #"get-type"
0 0 17 3 3 #" ( "
0 0 17 3 15 #"extended-env)))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 31 #";                             ("
0 0 17 3 16 #"funType-codomain"
0 0 17 3 2 #" ("
0 0 17 3 11 #"fun-id-type"
0 0 17 3 1 #" "
0 0 17 3 12 #"named-expr))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 32 #";                              ("
0 0 17 3 5 #"error"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"rec"
0 0 17 3 1 #" "
0 0 17 3 42 #"\"Type mismath in function application\"))] "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 4 #"; [("
0 0 17 3 6 #"equal?"
0 0 17 3 2 #" ("
0 0 17 3 14 #"funType-domain"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 1 #" "
0 0 17 3 12 #"extended-env"
0 0 17 3 4 #")) ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 7 #"rec-arg"
0 0 17 3 1 #" "
0 0 17 3 14 #"extended-env))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";                  ("
0 0 17 3 16 #"funType-codomain"
0 0 17 3 2 #" ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 10 #"named-expr"
0 0 17 3 1 #" "
0 0 17 3 15 #"extended-env))]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fun-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 3 #"id?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"funType-domain"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 2 #" ("
0 0 14 3 7 #"id-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"tenv"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 16 #"funType-codomain"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"app"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"Type mismath in function application\""
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"funType-domain"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 16 #"funType-codomain"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 2 #";("
0 0 17 3 8 #"get-type"
0 0 17 3 2 #" ("
0 0 17 3 8 #"fun-body"
0 0 17 3 1 #" "
0 0 17 3 8 #"fun-expr"
0 0 17 3 3 #") ("
0 0 17 3 8 #"aTypeSub"
0 0 17 3 2 #" ("
0 0 17 3 12 #"fun-arg-name"
0 0 17 3 1 #" "
0 0 17 3 8 #"fun-expr"
0 0 17 3 3 #") ("
0 0 17 3 8 #"get-type"
0 0 17 3 1 #" "
0 0 17 3 3 #"arg"
0 0 17 3 1 #" "
0 0 17 3 4 #"tenv"
0 0 17 3 9 #") tenv))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"The"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 9 #"parameter"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 8 #"function"
0 0 19 3 1 #" "
0 0 19 3 3 #"is "
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 11 #"fun-id-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 5 #" )) ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"\\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"\\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"The"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 6 #"actual"
0 0 19 3 1 #" "
0 0 19 3 8 #"argument"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"fuction"
0 0 19 3 1 #" "
0 0 19 3 3 #"is "
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"fun-body"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"tenv"
0 0 24 3 8 #" )))))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 19 #"; (lookup arg tenv)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; helper function defined to help run the sample programs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 8 #"get-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 9 #"mtTypeSub"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;--------------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; sample programs that are provided:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 6 #"}}}}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; test \""
0 0 17 3 2 #"=\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 4 #"} { "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; test four fundamental arithmetic operator5\\"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; test if, there are our new tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #" } {"
0 0 14 3 1 #"="
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 4 #"9999"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 4 #"5555"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; test app, these are our new tests "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; test with"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"} "
0 0 17 3 42 #";; this should evaluate to a boolean value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    {"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 5 #"}    "
0 0 17 3 54 #"; you can change these vals, but the larger one should"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}  "
0 0 17 3 48 #"; always wind up at the left of the final number"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 34 #"; and the smaller one at the right"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     {"
0 0 14 3 4 #"with"
0 0 24 3 3 #"  {"
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"  {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        {"
0 0 14 3 4 #"with"
0 0 24 3 3 #"  {"
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"  {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           {"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"} "
0 0 14 3 3 #"min"
0 0 24 3 2 #"} "
0 0 17 3 35 #"; output will be best if smaller is"
0 0 24 29 1 #"\n"
0 0 24 3 30 #" }}}})                        "
0 0 17 3 25 #"; no more than two digits"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 6 #"double"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 6 #"double"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 3 #"abs"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 4 #"}}} "
0 0 17 3 17 #";; absolute value"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 3 #"abs"
0 0 24 3 1 #" "
0 0 21 3 4 #"-101"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"      }  }"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 5 #"limit"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 2 #"44"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        {"
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"   }  }"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; A silly example:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     {"
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 5 #"} }})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Use currying to define \"two-parameter\""
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; function in terms of one-parameter"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; (first-class) functions"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;  {{mod-base b} n}"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; returns n modulo b."
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; [This should work in the language TBOB]"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; written by mike slattery - nov 2013"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 8 #"mod-base"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 4 #")) {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  }"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                }"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      }"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  {{"
0 0 14 3 8 #"mod-base"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"} "
0 0 21 3 2 #"11"
0 0 24 3 2 #"} "
0 0 17 3 19 #";; Compute 11 mod 7"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; Or put the parameters in the more"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; traditional order: "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 3 #"mod"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 4 #")) {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  }"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                }"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      }"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  {{"
0 0 14 3 3 #"mod"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"} "
0 0 21 3 1 #"7"
0 0 24 3 2 #"} "
0 0 17 3 20 #";; Compute 100 mod 7"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; test recursive, too bad"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 15 3 3 #"rec"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fac"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"} "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fac"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       {"
0 0 14 3 3 #"fac"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;----------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";Invalid programs the parser shouldn't like:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 8 #"x:number"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 1 #"x"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 1 #"x"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 2 #" {"
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #")   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #"} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; The INCORRECT silly example:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 6 #"number"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     {"
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 5 #"} }})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;----------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";Invalid programs the parser will like, but the type"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";checker shouldn't:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 6 #"double"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 6 #"double"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #" }})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 2 #" {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 6 #"double"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    {"
0 0 14 3 6 #"double"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 4 #"} })"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 1 #"b"
0 0 24 3 3 #" })"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"      }  }"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 15 3 3 #"rec"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fac"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"} "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"fac"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       {"
0 0 14 3 3 #"fac"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 15 3 3 #"rec"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fac"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 3 #") {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"} "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fac"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       {"
0 0 14 3 3 #"fac"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;-------------------------------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Our 2 sample problems"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; #1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 2 #" {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; #2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"} "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"} {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #"}})"
0           0
