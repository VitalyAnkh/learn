#+title: rCore Journal
* 2020 年 7 月 10 日
加入 rCore Summer of Code 的第一天。
完成：
1. 写了简历的初稿；
2. 复习了 Rust 语言；
3. 用 Rust 写了 leetcode 题目。
* 2020 年 7 月 11 日
1. 复习 Rust 语言的生命周期和所有权
2. 看 OSTEP 的第二部分，第 18 章和第 19 章
* 2020 年 7 月 12 日
** Rust 语言的作用域是静态作用域，即词法作用域（Lexical Scope ）。由一对花括号开辟作用域，其作用域在词法分析阶段已经确定了。
   问题：
*** TODO 相比静态作用域，动态作用域是什么样的？
** Rust 的编译时函数执行（CTFE ）是由 miri 执行的，miri 是一个 MIR 解释器。Rust 的 CTFE 特性仍有待扩展。
** 读 Computer Architecture: a Quantitative Approach 的第一章
** 发现对于计算机组成的很多概念忘记了，复习 Computer Organization and Design: the Hardware/Software Interface
* 2020 年 7 月 13 日
** 用 Rust 做 Leetcode 题目
** 继续读 Computer Architecture: a Quantitative Approach
* 2020 年 7 月 14 日
** Rust 程序运行时，首先启动 C 运行时(crt0) ，再由 crt0 启动 Rust 运行时的入口点。
*** TODO 既然有 crt0 ，那么存在 crt1 吗？
* 2020 年 7 月 15 日
* 2020 年 7 月 16 日
* 2020 年 7 月 17 日
** Rust 闭包
Rust 中闭包是由一个匿名结构体和 trait 来组合实现的。
** Rust 中字符表示
字符可以用 ASCII 码和 Unicode 码定义，'2A' 为 ASCII 码表中表示符号 '*' 的十六进制数，格式为 '\xHH' 。'151' 是 Unicode 十六进制码，格式为 '\u{HHH}' 。
#+BEGIN_SRC rust
// 在Emacs 中按 C-c C-c 查看运行结果
fn main() {
    println! {"\u{151}"};
    println! {"\x2A"};
    println! {"\u{CA0}"};
}
#+END_SRC

#+RESULTS:
: ő
: *
: ಠ

** Emacs
C-c C-q 给 Headline 添加标签
** OS
一般（x86 ）操作系统的启动过程：
1. BIOS
   1. BIOS 自检，检查内存、显卡等外设信息
   2. 初始化硬件
   3. 在内存中 0x000~0x3FF 处建立数据结构，中断向量表 （IVT ）并填写中断例程
2. BIOS 加载 MBR 到 0x7c00
3. MBR 加载 bootloader
4. bootloader 加载操作系统
* 2020 年 7 月 19 日
** 能够接受的清晰而且读起来舒服的伪代码语言：
1. 类型的命名使用驼峰命名法，单词首字母使用大写字母，缩写词用惯用的形态，例如 HTMLAttribute ，UTF8Code ，TLBEntry
2. 变量全部使用小写字母，单词之间用下划线分隔，缩写词一律转成小写，例如 offset ， tlb_entry
3. 用 Sum Type 表示可能出错的结果，像 Haskell 中的 Maybe 或 Either ，或者 Rust 中的 Option 或 Result
4. 使用 Rust 中的 match 语法
5. 函数的命名习惯跟变量一致
