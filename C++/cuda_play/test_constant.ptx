//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31442593
// Cuda compilation tools, release 11.7, V11.7.99
// Based on NVVM 7.0.1
//

.version 7.7
.target sm_80
.address_size 64

	// .globl	_Z20test_constant_globalv
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.const .align 2 .b8 a[8];
.const .align 2 .b8 b[8];
.global .align 1 .b8 $str[19] = {84, 104, 105, 115, 32, 105, 115, 32, 97, 114, 114, 114, 97, 121, 32, 97, 58, 10, 0};
.global .align 1 .b8 $str$1[4] = {37, 102, 10, 0};
.global .align 1 .b8 $str$2[18] = {84, 104, 105, 115, 32, 105, 115, 32, 97, 114, 114, 97, 121, 32, 98, 58, 10, 0};

.visible .entry _Z20test_constant_globalv()
{
	.local .align 8 .b8 	__local_depot0[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b16 	%rs<9>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<9>;
	.reg .b64 	%rd<10>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd1, %SP, 0;
	add.u64 	%rd2, %SPL, 0;
	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	mov.u64 	%rd5, 0;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r1, [retval0+0];
	} // callseq 0
	ld.const.u16 	%rs1, [a];
	// begin inline asm
	{ mov.b32 %f1, {0,%rs1};}

	// end inline asm
	cvt.f64.f32 	%fd1, %f1;
	st.local.f64 	[%rd2], %fd1;
	mov.u64 	%rd6, $str$1;
	cvta.global.u64 	%rd7, %rd6;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r2, [retval0+0];
	} // callseq 1
	ld.const.u16 	%rs2, [a+2];
	// begin inline asm
	{ mov.b32 %f2, {0,%rs2};}

	// end inline asm
	cvt.f64.f32 	%fd2, %f2;
	st.local.f64 	[%rd2], %fd2;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r3, [retval0+0];
	} // callseq 2
	ld.const.u16 	%rs3, [a+4];
	// begin inline asm
	{ mov.b32 %f3, {0,%rs3};}

	// end inline asm
	cvt.f64.f32 	%fd3, %f3;
	st.local.f64 	[%rd2], %fd3;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r4, [retval0+0];
	} // callseq 3
	ld.const.u16 	%rs4, [a+6];
	// begin inline asm
	{ mov.b32 %f4, {0,%rs4};}

	// end inline asm
	cvt.f64.f32 	%fd4, %f4;
	st.local.f64 	[%rd2], %fd4;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r5, [retval0+0];
	} // callseq 4
	mov.u64 	%rd8, $str$2;
	cvta.global.u64 	%rd9, %rd8;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r6, [retval0+0];
	} // callseq 5
	ld.const.u16 	%rs5, [b];
	// begin inline asm
	{ mov.b32 %f5, {0,%rs5};}

	// end inline asm
	cvt.f64.f32 	%fd5, %f5;
	st.local.f64 	[%rd2], %fd5;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r7, [retval0+0];
	} // callseq 6
	ld.const.u16 	%rs6, [b+2];
	// begin inline asm
	{ mov.b32 %f6, {0,%rs6};}

	// end inline asm
	cvt.f64.f32 	%fd6, %f6;
	st.local.f64 	[%rd2], %fd6;
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r8, [retval0+0];
	} // callseq 7
	ld.const.u16 	%rs7, [b+4];
	// begin inline asm
	{ mov.b32 %f7, {0,%rs7};}

	// end inline asm
	cvt.f64.f32 	%fd7, %f7;
	st.local.f64 	[%rd2], %fd7;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r9, [retval0+0];
	} // callseq 8
	ld.const.u16 	%rs8, [b+6];
	// begin inline asm
	{ mov.b32 %f8, {0,%rs8};}

	// end inline asm
	cvt.f64.f32 	%fd8, %f8;
	st.local.f64 	[%rd2], %fd8;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r10, [retval0+0];
	} // callseq 9
	ret;

}

