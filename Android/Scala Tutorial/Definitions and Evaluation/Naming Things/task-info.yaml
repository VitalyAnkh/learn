type: edu
files:
- name: src/DefinitionsAndEvaluation.scala
  visible: true
  placeholders:
  - offset: 0
    length: 52
    placeholder_text: // Complete the method evaluating the area of a disk
    initial_state:
      length: 52
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  - offset: 120
    length: 48
    placeholder_text: // the expression lacks the square of the radius
    initial_state:
      length: 48
      offset: 120
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: x * x
  text: |-
    // Complete the method evaluating the area of a diskobject DefinitionsAndEvaluation{

      def area(x: Double) = Math.PI * // the expression lacks the square of the radius

      def main(args: Array[String]): Unit = {
        println(area(5))
      }

    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import DefinitionsAndEvaluation.area
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers {

      def `check square`(): Unit = {
        area(3.0) shouldBe 9.0 * Math.PI
      }
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Naming-Things` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
