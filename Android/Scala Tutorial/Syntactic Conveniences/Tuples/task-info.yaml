type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Tuples` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/SyntacticConveniences.scala
  visible: true
  placeholders:
  - offset: 152
    length: 25
    placeholder_text: /*create the tuple here*/
    initial_state:
      length: 25
      offset: 152
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: (i, s)
  text: |-
    import org.scalatest.{FlatSpec, Matchers}

    object SyntacticConveniences extends FlatSpec with Matchers {
      def pair(i: Int, s: String): (Int, String) = /*create the tuple here*/

      def main(args: Array[String]): Unit = {
        val is: (Int, String) = (42, "foo")

        is match {
          case (i, s) =>
            println(i)
            println(s)
        }

        val (i, s) = is
        println(i)
        println(s)

        println(is._1)
        println(is._2)
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `test pair`(): Unit = {
        SyntacticConveniences.pair(37, "Test") shouldBe (37, "Test")
      }

    }
  learner_created: false
status: Unchecked
record: -1
