type: edu
files:
- name: test/TestSpec.scala
  visible: false
  text: |
    import org.scalatest.{Matchers}
    import org.scalatest.refspec.RefSpec

    class TestSpec extends RefSpec with Matchers  {
      SyntacticConveniences.function(Array(0, 1, 4, 5), Array(0, 1)) shouldBe Array((0, 0), (0, 1) , (4, 0), (4, 1))
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Functions` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/SyntacticConveniences.scala
  visible: true
  placeholders:
  - offset: 159
    length: 25
    placeholder_text: /*complete the function*/
    initial_state:
      length: 25
      offset: 159
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: yield (x, y)
  text: |-
    object SyntacticConveniences {
      def function(xs: Array[Int], ys: Array[Int]): Array[(Int, Int)] = {
        for {
          x <- xs if x % 2 == 0
          y <- ys
        } /*complete the function*/
      }

      def functionDesugared(xs: Array[Int], ys: Array[Int]): Array[(Int, Int)] = {
        xs.filter { x =>
          x % 2 == 0
        }.flatMap { x =>
          ys.map { y =>
            (x, y)
          }
        }
      }

      def main(args: Array[String]): Unit = {
        println("function output:")
        println(function(Array(1, 2, 3, 4), Array(1, 2, 3)).deep.mkString("\n"))
      }
    }
  learner_created: false
status: Unchecked
record: -1
