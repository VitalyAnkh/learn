type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Methods-Parameters` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/SyntacticConveniences.scala
  visible: true
  placeholders:
  - offset: 83
    length: 45
    placeholder_text: /*add a default parameter, so the step is 1*/
    initial_state:
      length: 45
      offset: 83
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: = 1
  - offset: 158
    length: 48
    placeholder_text: /*add an expression for the repeated parameter*/
    initial_state:
      length: 48
      offset: 158
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Int*
  - offset: 303
    length: 61
    placeholder_text: /*the output result of the divide should be a tuple of Ints*/
    initial_state:
      length: 61
      offset: 303
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: (Int, Int)
  text: |-
    object SyntacticConveniences {

      case class Range(start: Int, end: Int, step: Int /*add a default parameter, so the step is 1*/)


      def average(x: Int, xs: /*add an expression for the repeated parameter*/): Double =
        (x :: xs.to[List]).sum.toDouble / (xs.size + 1)


      type Result = Either[String, /*the output result of the divide should be a tuple of Ints*/]
      def divide(dividend: Int, divisor: Int): Result =
        if (divisor == 0) Left("Division by zero")
        else Right((dividend / divisor, dividend % divisor))

      def main(args: Array[String]): Unit = {
        val xs = Range(start = 1, end = 10)
        println("The step:")
        println(xs.step)

        println("average result:")
        println(average(1))
        println(average(1, 3))
        println(average(1, 3, 5, 7))

        println("divide result:")
        println(divide(4, 2))
        println(divide(5, 0))
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import SyntacticConveniences.{Range, average, divide}
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `default parameters`(): Unit = {
        val xs = Range(start = 1, end = 10)

        xs.step shouldBe 1
      }

      def `repeated parameters`(): Unit = {
        average(1) shouldBe 1.0
        average(1, 2) shouldBe 1.5
        average(1, 2, 3) shouldBe 2.0
      }

      def `type alias`(): Unit = {

        divide(6, 4) shouldBe Right((1, 2))
        divide(2, 0) shouldBe Left("Division by zero")
        divide(8, 4) shouldBe (Right((2, 0)): Either[String, (Int, Int)])
      }

    }
  learner_created: false
status: Unchecked
record: -1
