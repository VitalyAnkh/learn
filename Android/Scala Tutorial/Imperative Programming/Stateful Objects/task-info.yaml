type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Stateful-Objects` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/ImperativeProgramming.scala
  visible: true
  text: |
    object ImperativeProgramming{

      def main(args: Array[String]): Unit = {
        val x = new BankAccount
        val y = new BankAccount
        println(x deposit 30)
        println(x withdraw 20)
      }

    }
  learner_created: false
- name: src/BankAccount.scala
  visible: true
  placeholders:
  - offset: 112
    length: 46
    placeholder_text: /*add the expression for the updated balance*/
    initial_state:
      length: 46
      offset: 112
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: balance + amount
  - offset: 269
    length: 46
    placeholder_text: /*add the expression for the updated balance*/
    initial_state:
      length: 46
      offset: 269
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: balance - amount
  text: |-
    class BankAccount {
      private var balance = 0
      def deposit(amount: Int): Int = {
        if (amount > 0) balance = /*add the expression for the updated balance*/
        balance
      }
      def withdraw(amount: Int): Int =
        if (0 < amount && amount <= balance) {
          balance = /*add the expression for the updated balance*/
          balance
        } else throw new Error("insufficient funds")
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `observational equivalence`(): Unit = {
        val x = new BankAccount
        val y = new BankAccount
        x deposit 30 shouldBe 30
        x withdraw 20 shouldBe 10
      }
    }
  learner_created: false
status: Unchecked
record: -1
