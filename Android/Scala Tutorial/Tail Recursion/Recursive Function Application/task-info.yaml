type: edu
files:
- name: src/TailRecursion.scala
  visible: true
  placeholders:
  - offset: 94
    length: 57
    placeholder_text: //you need to complete the tail recursion annotation here
    initial_state:
      length: 57
      offset: 94
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: tailrec
  text: |-
    import scala.annotation.tailrec

    object TailRecursion{

      def factorial(n: Int): Int = {
        @//you need to complete the tail recursion annotation here
        def iter(x: Int, result: Int): Int =
          if (x == 0) result
          else iter(x - 1, result * x)

        iter(n, 1)
      }


      def main(args: Array[String]): Unit = {
        println(factorial(5))
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `check tail recursion`(): Unit = {
        TailRecursion.factorial(5) shouldBe 120
        TailRecursion.factorial(11) shouldBe 39916800
      }

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Recursive-Function-Application` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
