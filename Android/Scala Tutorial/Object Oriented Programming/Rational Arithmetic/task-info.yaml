type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Rational-Arithmetic` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/RationalArithmetic.scala
  visible: true
  placeholders:
  - offset: 561
    length: 80
    placeholder_text: /*create a Rational with appropriate expressions for numerator
      and denomenator*/
    initial_state:
      length: 80
      offset: 561
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      new Rational(
              numer * r.numer ,
              denom * r.denom
            )
  - offset: 674
    length: 80
    placeholder_text: /*create a Rational with appropriate expressions for numerator
      and denomenator*/
    initial_state:
      length: 80
      offset: 674
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      new Rational(
              numer * r.denom ,
              denom * r.numer
            )
  text: |-
    import org.scalatest.{FlatSpec, Matchers}

    object RationalArithmetic extends FlatSpec with Matchers {
      class Rational(x: Int, y: Int) {
        private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
        private val g = gcd(x, y)
        def numer = x / g
        def denom = y / g
        def + (r: Rational) =
          new Rational(
            numer * r.denom + r.numer * denom,
            denom * r.denom
          )
        def - (r: Rational) =
          new Rational(
            numer * r.denom - r.numer * denom,
            denom * r.denom
          )
        def * (r: Rational) =
          /*create a Rational with appropriate expressions for numerator and denomenator*/
        def / (r: Rational) =
          /*create a Rational with appropriate expressions for numerator and denomenator*/
      }

      def main(args: Array[String]): Unit = {
        val firstRational = new Rational(3, 4)
        val secondRational = new Rational(11, 13)

        println((firstRational * secondRational).numer)
        println((firstRational * secondRational).denom)
        println((firstRational / secondRational).numer)
        println((firstRational / secondRational).denom)
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import RationalArithmetic.Rational
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `dynamic binding`(): Unit = {

        val firstRational = new Rational(1, 2)
        val secondRational = new Rational(5, 7)

        (firstRational * secondRational).numer shouldBe 5
        (firstRational * secondRational).denom shouldBe 14
        (firstRational / secondRational).numer shouldBe 7
        (firstRational / secondRational).denom shouldBe 10
      }
    }
  learner_created: false
status: Unchecked
record: -1
