type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Object-Oriented-Programming` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/ObjectOrientedProgramming.scala
  visible: true
  placeholders:
  - offset: 101
    length: 35
    placeholder_text: /*Create a NonEmpty contatining 7*/
    initial_state:
      length: 35
      offset: 101
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: new NonEmpty(7, Empty, Empty)
  text: |-
    import org.scalatest.{FlatSpec, Matchers}

    object ObjectOrientedProgramming{
      var nonEmptyExample = /*Create a NonEmpty contatining 7*/

      def main(args: Array[String]): Unit = {
        println(Empty contains 2)
        println(nonEmptyExample contains 7)
      }
    }
  learner_created: false
- name: scala_type_hierarchy.png
  visible: false
  learner_created: false
- name: src/IntSet.scala
  visible: true
  text: |-
    abstract class IntSet {
      def incl(x: Int): IntSet
      def contains(x: Int): Boolean
    }
  learner_created: false
- name: src/Empty.scala
  visible: true
  text: |-
    object Empty extends IntSet {
      def contains(x: Int): Boolean = false
      def incl(x: Int): IntSet = new NonEmpty(x, Empty, Empty)
    }
  learner_created: false
- name: src/NonEmpty.scala
  visible: true
  text: |-
    class NonEmpty(elem: Int, left: IntSet, right: IntSet) extends IntSet {

      def contains(x: Int): Boolean =
        if (x < elem) left contains x
        else if (x > elem) right contains x
        else true

      def incl(x: Int): IntSet =
        if (x < elem) new NonEmpty(elem, left incl x, right)
        else if (x > elem) new NonEmpty(elem, left, right incl x)
        else this
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `dynamic binding`(): Unit = {
        Empty contains 1 shouldBe false
        ObjectOrientedProgramming.nonEmptyExample contains 7 shouldBe true
      }
    }
  learner_created: false
status: Unchecked
record: -1
