type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Equality` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/BankAccount.scala
  visible: true
  text: |-
    class BankAccount {

      private var balance = 0

      def deposit(amount: Int): Unit =
        if (amount > 0) balance = balance + amount

      def withdraw(amount: Int): Int =
        if (0 < amount && amount <= balance) {
          balance = balance - amount
          balance
        } else throw new Error("insufficient funds")
    }
  learner_created: false
- name: src/Note.scala
  visible: true
  text: 'case class Note(name: String, duration: String, octave: Int)'
  learner_created: false
- name: src/ClassesVsCaseClasses.scala
  visible: true
  placeholders:
  - offset: 50
    length: 33
    placeholder_text: /*create a new BankAccount here*/
    initial_state:
      length: 33
      offset: 50
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: new BankAccount
  - offset: 105
    length: 33
    placeholder_text: /*create a new BankAccount here*/
    initial_state:
      length: 33
      offset: 105
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: new BankAccount
  - offset: 155
    length: 53
    placeholder_text: /*create a new c3 note here with a quarter duration*/
    initial_state:
      length: 53
      offset: 155
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Note("C", "Quarter", 3)
  - offset: 224
    length: 53
    placeholder_text: /*create a new c3 note here with a quarter duration*/
    initial_state:
      length: 53
      offset: 224
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Note("C", "Quarter", 3)
  text: |-
    object ClassesVsCaseClasses{
      val aliceAccount = /*create a new BankAccount here*/
      val bobAccount   = /*create a new BankAccount here*/

      val c3     = /*create a new c3 note here with a quarter duration*/
      val cThree = /*create a new c3 note here with a quarter duration*/

      def main(args: Array[String]): Unit = {
        println(aliceAccount == bobAccount)
        print(c3 == cThree)
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import ClassesVsCaseClasses.{aliceAccount, bobAccount, c3, cThree}
    import org.scalatest.refspec.RefSpec
    import org.scalatest.Matchers

    class Test extends RefSpec with Matchers{

      def `test equality`(): Unit = {

        aliceAccount == bobAccount shouldBe false
        c3 == cThree shouldBe true

      }
    }
  learner_created: false
status: Unchecked
record: -1
