type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Creation-and-Manipulation` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/ClassesVsCaseClasses.scala
  visible: true
  placeholders:
  - offset: 69
    length: 38
    placeholder_text: /*deposit 100 on the Alice's account*/
    initial_state:
      length: 38
      offset: 69
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: aliceAccount.deposit(100)
  - offset: 119
    length: 44
    placeholder_text: /*create a c3 note with a quarter duration*/
    initial_state:
      length: 44
      offset: 119
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Note("C", "Quarter", 3)
  text: |-
    object ClassesVsCaseClasses {
      val aliceAccount = new BankAccount
      /*deposit 100 on the Alice's account*/
      val c3 = /*create a c3 note with a quarter duration*/

      def main(args: Array[String]): Unit = {
        println(aliceAccount.withdraw(10))
        println(c3.name)
      }
    }
  learner_created: false
- name: src/BankAccount.scala
  visible: true
  text: |-
    class BankAccount {

      private var balance = 0

      def deposit(amount: Int): Unit =
        if (amount > 0) balance = balance + amount

      def withdraw(amount: Int): Int =
        if (0 < amount && amount <= balance) {
          balance = balance - amount
          balance
        } else throw new Error("insufficient funds")
    }
  learner_created: false
- name: src/Note.scala
  visible: true
  text: 'case class Note(name: String, duration: String, octave: Int)'
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import ClassesVsCaseClasses.{aliceAccount, c3}
    import org.scalatest.refspec.RefSpec
    import org.scalatest.Matchers

    class Test extends RefSpec with Matchers {

      def `creation And Manipulation`(): Unit = {
        c3.name shouldBe "C"
        aliceAccount.withdraw(50) shouldBe 50
      }
    }
  learner_created: false
status: Unchecked
record: -1
