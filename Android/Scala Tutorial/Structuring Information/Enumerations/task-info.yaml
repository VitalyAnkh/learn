type: edu
files:
- name: src/StructuringInformation.scala
  visible: true
  placeholders:
  - offset: 369
    length: 24
    placeholder_text: //return half of a whole
    initial_state:
      length: 24
      offset: 369
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 0.5
  - offset: 400
    length: 60
    placeholder_text: /*this should be one of the casesq, for a quarter duration*/
    initial_state:
      length: 60
      offset: 400
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: case Quarter
  text: |-
    import org.scalatest.{FlatSpec, Matchers}

    object StructuringInformation extends FlatSpec with Matchers {
      sealed trait Duration
      case object Whole   extends Duration
      case object Half    extends Duration
      case object Quarter extends Duration

      def fractionOfWhole(duration: Duration): Double =
        duration match {
          case Whole   => 1.0
          case Half    => //return half of a whole
          /*this should be one of the casesq, for a quarter duration*/ => 0.25
        }

      def main(args: Array[String]): Unit = {
        println(fractionOfWhole(Quarter))
        println(fractionOfWhole(Half))
        println(fractionOfWhole(Whole))
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import StructuringInformation.{Half, Quarter, Whole, fractionOfWhole}
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `check algebraic data types`(): Unit = {
        fractionOfWhole(Half) shouldBe 0.5
        fractionOfWhole(Quarter) shouldBe 0.25
        fractionOfWhole(Whole) shouldBe 1
      }

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Enumerations` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
