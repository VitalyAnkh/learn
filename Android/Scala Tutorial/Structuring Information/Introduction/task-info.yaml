type: edu
files:
- name: music_sheet.png
  visible: false
  learner_created: false
- name: src/StructuringInformation.scala
  visible: true
  placeholders:
  - offset: 129
    length: 91
    placeholder_text: //the function should return a new note with name C, duration
      of quarter and a third octave
    initial_state:
      length: 91
      offset: 129
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Note("C", "Quarter", 3)
  text: |-
    object StructuringInformation{
      case class Note(name: String, duration: String, octave: Int)

      def setUpC3Note(): Note = {
        //the function should return a new note with name C, duration of quarter and a third octave
      }

      def main(args: Array[String]): Unit = {
        val note = setUpC3Note()
        println("Name: " + note.name)
        print("duration: " + note.duration)
        print("octave: " + note.octave)
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `check class projection`(): Unit = {
        val c3 = StructuringInformation.setUpC3Note()
        withClue("The name of the Note should be 3\n") {c3.name shouldBe "C"}
        withClue("The duration of the note should be Quarter\n") {c3.duration shouldBe "Quarter"}
        withClue("The octave of the note should be 3\n") {c3.octave shouldBe 3}
      }

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Introduction` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
