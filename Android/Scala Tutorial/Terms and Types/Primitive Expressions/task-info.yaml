type: edu
files:
- name: src/TermsAndTypes.scala
  visible: true
  placeholders:
  - offset: 69
    length: 27
    placeholder_text: //Finish the greetings here
    initial_state:
      length: 27
      offset: 69
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '"Scala!"'
  - offset: 141
    length: 44
    placeholder_text: //Insert a number here, so the sum will be 4
    initial_state:
      length: 44
      offset: 141
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 3
  text: |
    object TermsAndTypes{

      def sayHello(): String = {
        "Hello, " ++ //Finish the greetings here
      }

      def sumTheNumbers(): Int = {
        1 + //Insert a number here, so the sum will be 4
      }

      def main(args: Array[String]): Unit = {
        println(sayHello())
        println(sumTheNumbers())
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers {

      def `check sayHello`(): Unit = {
        TermsAndTypes.sayHello() shouldBe "Hello, Scala!"
      }

      def `check sumTheNumbers`(): Unit = {
        TermsAndTypes.sumTheNumbers() shouldBe 4
      }
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Primitive-Expressions` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
