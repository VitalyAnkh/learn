type: edu
files:
- name: src/TermsAndTypes.scala
  visible: true
  placeholders:
  - offset: 68
    length: 36
    placeholder_text: //invoke the toHexString method here
    initial_state:
      length: 36
      offset: 68
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: toHexString
  - offset: 160
    length: 35
    placeholder_text: /*invoke the contains method here*/
    initial_state:
      length: 35
      offset: 160
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: contains
  - offset: 245
    length: 31
    placeholder_text: /*invoke the drop method here*/
    initial_state:
      length: 31
      offset: 245
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: drop
  - offset: 326
    length: 31
    placeholder_text: /*invoke the take method here*/
    initial_state:
      length: 31
      offset: 326
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: take
  text: |-
    object TermsAndTypes{

      def toHexStringMethod(): String = {
        16.//invoke the toHexString method here
      }

      def containsMethod(): Boolean = {
        (0 to 10)./*invoke the contains method here*/(10)
      }
      def dropMethod(): String = {
        "foo"./*invoke the drop method here*/(1)
      }

      def takeMethod(): String = {
        "bar"./*invoke the take method here*/(2)
      }

      def main(args: Array[String]): Unit = {
        println(toHexStringMethod())
        println(containsMethod())
        println(dropMethod())
        println(takeMethod())
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers {

      def `check toHexString method`(): Unit = {
        TermsAndTypes.toHexStringMethod() shouldBe "10"
      }

      def `check contains method`(): Unit = {
        TermsAndTypes.containsMethod() shouldBe true
      }

      def `check drop method`() : Unit = {
        TermsAndTypes.dropMethod() shouldBe "oo"
      }

      def `check take method`(): Unit = {
        TermsAndTypes.takeMethod() shouldBe "ba"
      }
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Common-Types` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
