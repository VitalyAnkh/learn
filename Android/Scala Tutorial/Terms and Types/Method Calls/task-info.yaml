type: edu
files:
- name: src/TermsAndTypes.scala
  visible: true
  placeholders:
  - offset: 80
    length: 58
    placeholder_text: //Invoke a method here making all of the letters uppercase
    initial_state:
      length: 58
      offset: 80
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: toUpperCase
  - offset: 179
    length: 64
    placeholder_text: //invoke a method here to return an absolute value of the number
    initial_state:
      length: 64
      offset: 179
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: abs
  text: |-
    object TermsAndTypes {

      def upperCaseMethod(): String = {
        "Hello, Scala!".//Invoke a method here making all of the letters uppercase
      }

      def absMethod(): Int = {
        -42.//invoke a method here to return an absolute value of the number
      }

      def main(args: Array[String]): Unit = {
        println(upperCaseMethod())
        println(absMethod())
      }

    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.{FlatSpec, Matchers}

    class Test extends FlatSpec with Matchers{

      def `check methods`(): Unit = {
        TermsAndTypes.upperCaseMethod() shouldBe "HELLO, SCALA!"
        TermsAndTypes.absMethod() shouldBe 42
      }
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Method-Calls` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
