type: edu
files:
- name: src/LexicalScopes.scala
  visible: true
  placeholders:
  - offset: 185
    length: 50
    placeholder_text: /*insert the x variable from the Bar object here*/
    initial_state:
      length: 50
      offset: 185
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: x
  - offset: 238
    length: 59
    placeholder_text: /*here you need to insert the x value from the Foo object*/
    initial_state:
      length: 59
      offset: 238
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Foo.x
  text: |-
    object LexicalScopes {
      def objectScopes(): Int = {
        object Foo {
          val x = 1
        }

        object Bar {
          val x = 2
        }

        object Baz {

          import Bar.x

          val y = /*insert the x variable from the Bar object here*/ + /*here you need to insert the x value from the Foo object*/
        }

        Baz.y
      }

      def main(args: Array[String]): Unit = {
        println(objectScopes())
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `check object scopes`(): Unit = {
        LexicalScopes.objectScopes() shouldBe 3
      }

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Lexical-Scoping` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
