type: edu
files:
- name: src/LexicalScopes.scala
  visible: true
  placeholders:
  - offset: 75
    length: 40
    placeholder_text: /*declare a name for the function here*/
    initial_state:
      length: 40
      offset: 75
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: f
  - offset: 166
    length: 40
    placeholder_text: /*use the name you declared previously*/
    initial_state:
      length: 40
      offset: 166
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: f
  text: |-
    object LexicalScopes {
      def scopeRules(): Unit = {
        val x = 0

        def /*declare a name for the function here*/(y: Int) = y + 1

        val result = {
          val x = /*use the name you declared previously*/(3)
          x * x
        } + x

        println(result)
      }

      def main(args: Array[String]): Unit = {
        scopeRules()
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers {

      def `check scope rules`(): Unit = {
        val stream = new java.io.ByteArrayOutputStream()
        Console.withOut(stream) {
          LexicalScopes.scopeRules()
        }
        stream.toString().trim shouldBe ("16")
      }

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Nested-Functions` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Unchecked
record: -1
